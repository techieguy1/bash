#!/usr/bin/bash
########################################################################################################
#
# _functions.sh
#
# Defines common functions to be used by other shell scripts.
#
#-------------------------------------------------------------------------------------------------------
# DATE     | USER: DCESRIPTION
#----------+--------------------------------------------------------------------------------------------
# 20191127 | Vince: Initial revision.
#----------+--------------------------------------------------------------------------------------------
# 20200912 | Vince: Added \[ ...  to prevent the command line history from shifting "right" when 
#          | going through the history. This is due to the non-printable sequences making bash think
#          | the line is bigger than it should be. So, \e[30m is around 5 characters. Escaping it to
#          | \[\e[30m essentially makes it 0 characters.
#          |
#          | Example (what I want): root@machine > last_command 1 2 3 4
#          | Example (what I got) : root@machine > last_last_command 1 2 3 4
#          |
#          | Adding \[ ...  around the color codes in the PS1 command prompt brings us back to "what
#          | I want".
#----------+--------------------------------------------------------------------------------------------
########################################################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define colors...Color names are spelled out for easier remembrance. Too much to type? Take a typing
# class.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_colors() {
   # Escape characters
   ESC="\e["
   
   # Set
   BOLD="${ESC}1m"
   DIM="${ESC}2m"
   UNDERLINE="${ESC}4m"
   BLINK="${ESC}5m"
   REVERSE="${ESC}7m"
   HIDDEN="${ESC}8m"

   # Reset
   RESET_ALL="${ESC}0m"
   NO_COLOR="${ESC}0m"
   NO_BOLD="${ESC}21m"
   NO_DIM="${ESC}22m"
   NO_UNDERLINE="${ESC}24m"
   NO_BLINK="${ESC}25m"
   NO_REVERSE="${ESC}27m"
   NO_HIDDEN="${ESC}28m"
         
   # Standard 16 colors
   BLACK="${ESC}30m"
   RED="${ESC}31m"
   GREEN="${ESC}32m"
   ORANGE="${ESC}33m"
   BLUE="${ESC}34m"
   PURPLE="${ESC}35m"
   CYAN="${ESC}36m"
   LIGHTGRAY="${ESC}37m"
   DARKGRAY="${ESC}90m"
   LIGHTRED="${ESC}91m"
   LIGHTGREEN="${ESC}92m"
   YELLOW="${ESC}93m"
   LIGHTBLUE="${ESC}94m"
   LIGHTPURPLE="${ESC}95m"
   LIGHTCYAN="${ESC}96m"
   WHITE="${ESC}97m"
   
   # Backgrounds
   BACK_BLACK="${ESC}40m"
   BACK_RED="${ESC}41m"
   BACK_GREEN="${ESC}42m"
   BACK_ORANGE="${ESC}43m"
   BACK_BLUE="${ESC}44m"
   BACK_PURPLE="${ESC}45m"
   BACK_CYAN="${ESC}46m"
   BACK_LIGHTGRAY="${ESC}47m"
   BACK_DARKGRAY="${ESC}100m"
   BACK_LIGHTRED="${ESC}101m"
   BACK_LIGHTGREEN="${ESC}102m"
   BACK_YELLOW="${ESC}103m"
   BACK_LIGHTBLUE="${ESC}104m"
   BACK_LIGHTPURPLE="${ESC}105m"
   BACK_LIGHTCYAN="${ESC}106m"
   BACK_WHITE="${ESC}107m"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Line separator
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_separator() {
   printf "${CYAN}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${RESET_ALL}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Warning
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_warning() {
   printf "${BLACK}${BACK_YELLOW}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${RESET_ALL}\n"
   printf "${BLACK}${BACK_YELLOW}!        W A R N I N G     W A R N I N G     W A R N I N G     W A R N I N G     W A R N I N G        !${RESET_ALL}\n"     
   printf "${BLACK}${BACK_YELLOW}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${RESET_ALL}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Error
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
printError() {
   printf "${WHITE}${BACK_RED}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${RESET_ALL}\n"
   printf "${WHITE}${BACK_RED}!    E R R O R     E R R O R     E R R O R     E R R O R     E R R O R     E R R O R     E R R O R    !${RESET_ALL}\n"     
   printf "${WHITE}${BACK_RED}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${RESET_ALL}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Prints out an error message and exits. For the ${2} to work, you must pass in exactly this ${LINENO} 
# to this function.
#
# Example: _error_exit "Your custom error  message" ${LINENO}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
printErrorExit() {
   _error
   _printCyan "${1:-"Unknown Error"} on line ${2}."
   exit
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This is a clean exit (no errors).
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cleanExit() {
   _printCyan "${1}"
   exit
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Pretty printing of output with cyan.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_printCyan() {
   printf "${CYAN}${1}${RESET_ALL}${2}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Pretty printing of output with yellow.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_printYellow() {
   printf "${YELLOW}${1}${RESET_ALL}${2}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Press enter to continue...
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pressEnterKey() {
   printf "${LIGHT_BLUE}"
   read -p "Press enter to continue..."
   printf "${RESET_ALL}"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Git log find by commit message
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
glf() { 
   git log --all --grep="$1"; 
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get process information by passing in a name (the application name, user, etc.).
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
proc() { 
   if [ $# -eq 0 ]; then
      _error; _separator
      _printCyan "You must enter a name to get the process listing: " "e.g.: proc myuser"
      _separator
   else
      ps aux | grep --color=auto ${1} | grep -v grep
   fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Git clone shortcut for either my repo or someone else's.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
clone() {
   if [ $# -eq 0 ]; then
      echo "Please enter repo name or full url:";
      read repo;
      clone $repo;
   elif [[ ${1} == --help ]] || [[ ${1} == --h ]] || [[ ${1} == --? ]]; then
      echo "This will clone a git repo.";
      echo "";
      echo "Option 1: You can just provide the name, eg:";
      echo "$ clone membership";
      echo "This will do: git clone https://github.com/techieguy1/membership.git";
      echo "";
      echo "Option 2: Provide the full URL";
      echo "$ clone https://github.com/smallrye/smallrye-rest-client.git";
      echo "This will do: git clone https://github.com/smallrye/smallrye-rest-client.git";
   else
      if [[ ${1} == https://* ]] || [[ ${1} == git://* ]] || [[ ${1} == ssh://* ]] ; then
          URL=${1};
      else
          URL='https://github.com/techieguy1/'${1}'.git';
      fi

      echo git clone "$URL";
      git clone "$URL";
   fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Git branch shortcut for the PS1 command line. The beauty of this function is that if there isn't .git
# directory, you won't see an empty git─▶ directive.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git_branch() {
   git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git─▶ \1)/' 
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Trash functions. Note: MacOS uses ~/.Trash directory which I don't recommend using here. The following 
# is specific for the command line.
#
# checkTrash()  - Checks the trash to see if there are any items in it.
# remove()      - Moves a file or entire directory tree to the trash directory.
# emptyTrash()  - Empties _ALL_ contents of the trash directory.
# restore()     - Restores a file or directory from the trash to the original location.
#
# TODO 1. Implement restore capabilities by keeping track of the directory location of the trashed file.
# TODO 2. Empty one item at a time. 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Is there anything in the trash?
checkTrash() {
   local items_files=`find ${TRASH_LOCATION} -type f -name '*' -print | wc -l | xargs`
   local items_directories=`find ${TRASH_LOCATION} -type d -name '*' -print | wc -l | xargs`
   local size=`du -hs ${TRASH_LOCATION} | cut -f1 | xargs`

   if [[ ! "$(ls -A ${TRASH_LOCATION})" ]]; then
      echo ""
      _separator
      _printCyan "Trash is empty." 
      _separator
   else
      echo ""
      _separator
      _printCyan "Trash has ${items_files} files in it."
      _printCyan "Trash has ${items_directories} directories in it."
      _printCyan "Total size is ${size}b."
      _separator
  fi
}

# Empty the trash.
emptyTrash() {
   if [[ ! "$(ls -A ${TRASH_LOCATION})" ]]; then 
      echo ""
      _separator 
      _printYellow "Trash is already empty."
      _separator
   else
      _warning
      check_trash
      echo ""
      echo -n "Are you sure want to empty the trash? Type exactly YES to empty: "
      read answer
      if [[ ${answer} == "YES" ]]; then 
         rm -fr ${TRASH_LOCATION}/*
         echo ""
         _separator
         _printCyan "Trash emptied."
         _separator
      else
         echo ""
         _separator
         _printYellow "Trash not emptied."
         _separator
      fi
   fi
}

# "Deletes" files and/or directories to my trash location.
remove() {
   # Ensure trash location is there.
   if [[ ! -d ${TRASH_LOCATION} ]]; then
      mkdir -p ${TRASH_LOCATION}
   fi

   # If parameter 1 of remove is empty, throw an error and break out of the function.
   if [[ "X${1}" == "X" ]]; then
      _error
      echo ""
      _separator
      _printCyan "You must supply a file or directory to be trashed."
      _separator
      return
   fi

   # Define local variables to this function.
   local FILE_BASENAME;
   local DIRECTORY_LOCATION; 
   local NEW_TRASH_AREA;
   local isFile; 

   # Get location of the file or directory that is being deleted. Remove the first
   # / so that file or directory can be moved to $HOME/.local/Trash.
   if [[ -f ${1} ]]; then
      isFile="true"
      FILE_BASENAME=`basename ${1}`
      DIRECTORY_LOCATION=`readlink -f ${1}`
      DIRECTORY_LOCATION=`dirname ${DIRECTORY_LOCATION}`
      DIRECTORY_LOCATION=`echo ${DIRECTORY_LOCATION:1}`
   elif [[ -d ${1} ]]; then
      isFile="false"
      DIRECTORY_LOCATION=`readlink -f ${1}` 
      DIRECTORY_LOCATION=`echo ${DIRECTORY_LOCATION:1}`
   else
      _error;
      echo ""
      _separator
      _printCyan "Can only put files and directories in the trash can."
      _printCyan "If you're looking to remove sockets or pipes, use"
      _printCyan "rm instead."
      return
   fi

   # If it's a file, make the directory first in the trash area and then move the
   # file to that location.
   if [[ ${isFile} == "true" ]]; then 
      NEW_TRASH_AREA=${TRASH_LOCATION}/${DIRECTORY_LOCATION}
      mkdir -p ${NEW_TRASH_AREA} 
      mv /${DIRECTORY_LOCATION}/${FILE_BASENAME} ${NEW_TRASH_AREA}
      rm -f /${DIRECTORY_LOCATION}/${FILE_BASENAME}
   else 
      NEW_TRASH_AREA=${TRASH_LOCATION}/`dirname ${DIRECTORY_LOCATION}`
      mkdir -p ${NEW_TRASH_AREA}
      mv /${DIRECTORY_LOCATION} ${NEW_TRASH_AREA}
   fi
}

# Restore a file or directory to its original location.
# TODO Fix restore() function
restore() {
   # Show first level directory of ~/.local/Trash
   ls -1A ${TRASH_LOCATION} | nl
   echo ""
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Log my session using script.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
logMySession() {
   if [[ ! -d ${SESSION_LOCATION} ]]; then
      mkdir -p ${SESSION_LOCATION}
   fi

   SESSION_DATE=`date +"%Y%m%d%H%M%S"`
   _separator; _printCyan "Press CTRL-D or type 'exit' to exit logging."; _separator
   script ${SESSION_LOCATION}/session_${SESSION_DATE}.log
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Extraction utility.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
extract() {
   if [ -z "$1" ]; then
      # display usage if no parameters given
      echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
      echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
      return 1
   else
      for n in $@
      do
         if [ -f "$n" ] ; then
            case "${n%,}" in
               *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                            tar xvf "$n"       ;;
               *.lzma)      unlzma ./"$n"      ;;
               *.bz2)       bunzip2 ./"$n"     ;;
               *.rar)       unrar x -ad ./"$n" ;;
               *.gz)        gunzip ./"$n"      ;;
               *.zip)       unzip ./"$n"       ;;
               *.z)         uncompress ./"$n"  ;;
               *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                            7z x ./"$n"        ;;
               *.xz)        unxz ./"$n"        ;;
               *.exe)       cabextract ./"$n"  ;;
               *)           echo "extract: '$n' - unknown archive method"
                            return 1
                            ;;
             esac
         else
            echo "'$n' - file does not exist"
            return 1
         fi
      done
   fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Kill a running process.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kp() {
   if [[ "X${1}" == "X" ]]; then
      _error
      echo "" 
      _printCyan "Nothing to kill."
      echo ""
      _separator
   else
      kill -9 `ps aux | grep -v grep | grep ${1} | awk '{print $2}'` 2>/dev/null
      if [ $? -gt 0 ]; then
         _error 
         echo "" 
	 _printCyan "${1} process does not exist."
	 echo ""
	 _separator
      else
         _separator
         _printCyan "${1} process killed."
         _separator
      fi
   fi
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Exit a script cleanly.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
exit_script() {
   log "{LINENO}" "info" ""
   log "{LINENO}" "info" "Exit code: ${?}"
   log "{LINENO}" "info" ""
   log "{LINENO}" "info" "++++++++++++++++++++++++++++++++++++++++++++++++++"
   log "{LINENO}" "info" "|                       END                      |"
   log "{LINENO}" "info" "++++++++++++++++++++++++++++++++++++++++++++++++++"
   exit
}
 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Log an error during script execution.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
error() {
   local functionName=${1}
   local errorLineNumber=${2}
   local errorCode=${3}
   local errorDescription=${4}

   log "{LINENO}" "error" "Function ${functionName}: Line # ${errorLineNumber}: Error code ${errorCode}: ${errorDescription}"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Adds enhanced logging information to any script.
#   $1 = Log level: SEVERE, ERROR, WARN, INFO, DEBUG, TRACE (all with its own color)
#        [log level is case-insensitive.]
#   $2 = Line number from calling function.
#   $3 = The log message. 
#
#   Usage: log "${LINENO}" "Error" "This is some message about the error."
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
log() {
   local lineNum=${1}
   local level=${2}
   local message=${3}
   local logTimestamp=`date +"%Y-%m-%d %H:%M:%S"`
   local levelColor="${RESET_ALL}"
   local functionName="${CYAN}${FUNCNAME[1]}${RESET_ALL}"

   if [[ "X${lineNum}" == "X" ]]; then
      printError
      printf "Not enough parameters for log."
      printf "\n\nUsage example: log \"\${LINENO}\" \"Error\" \"This is some message about the error.\"\n"
      return
   fi

   if [[ "${level,,}" == "severe" ]]; then
      levelColor="${BACK_RED}${WHITE}"
   elif [[ "${level,,}" == "error" ]]; then
      levelColor="${RED}"
   elif [[ "${level,,}" == "warn" ]]; then
      levelColor="${YELLOW}"
   elif [[ "${level,,}" == "info" ]]; then
      levelColor="${GREEN}"
   elif [[ "${level,,}" == "debug" ]]; then
      levelColor="${CYAN}"
   elif [[ "${level,,}" == "trace" ]]; then
      levelColor="${WHITE}"
   else
      printError
      printf "Level incorrect. Level should be one of\n"
      printf "  SEVERE\n  ERROR\n  WARN\n  INFO\n  DEBUG\n  TRACE\n"
      return
   fi
   level="${level^^}"
   printf "${logTimestamp} | ${BACK_WHITE}${BLACK}"
   printf "%5s" "${lineNum}"
   printf "${RESET_ALL} | ${levelColor}"
   printf "%6s" "${level}"
   printf "${RESET_ALL} | ${functionName} | ${message}\n"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Test the output of the logger function.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
testLogger() { 
   log "${LINENO}" "severe" "message" 
   log "${LINENO}" "error" "message" 
   log "${LINENO}" "warn" "message" 
   log "${LINENO}" "info" "message" 
   log "${LINENO}" "debug" "message" 
   log "${LINENO}" "trace" "message"
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create a new PS1 for using in screenshots. Removes private info such as the user ID.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
newPS1() {
   export PS1="${WHITE}>${RESET_ALL} "
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# View any markdown file using lynx and pandoc.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
md() {
   pandoc "${1}" | lynx -stdin
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Do a cool thing on the screen when first logging in.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
screenBroadcastMessage() {
   clear
   x=`tput lines`
   y=`tput cols`

   HOST=`hostname`
   MESG1="Welcome to ${HOST^^}"
   MESG2="Kernel version `uname -r | cut -f1-3 -d"."`"

   LEN_MESG1=${#MESG1}
   LEN_MESG2=${#MESG2}

   POS_MESG1=$(((y-LEN_MESG1)/2))
   POS_MESG2=$(((y-LEN_MESG2)/2))

   TOP_POS=$(((x-6)/2))

   tput cup ${TOP_POS} ${POS_MESG1}; echo -e "${CYAN}${MESG1}${NO_COLOR}"
   tput cup $((TOP_POS+2)) ${POS_MESG2}; echo ${MESG2}

   tput cup $((x-3)) 0
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Replace spaces in the filename with underscores.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
replaceSpaces() {
   for file in *' '*
   do
      mv -- "${file}" "${file// /_}"
   done
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
#                    M   A   I   N
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Execute these immediately. 
export TRASH_LOCATION=~/.local/Trash
export SESSION_LOCATION=~/.local/session
_colors
